/*
 * **Υλοποι**ήστε την κλάση **BlackPanther{}** (Μαύρος Πάνθηρας) με τα
 * χαρακτηριστικά: **name (**που του έχουν δώσει οι κάτοικοι της γύρω περιοχής),
 * **ηλικία**, **περιοχή** που ζει, **βάρος**, **φύλλο**, **αναπαράχθηκε_ή_όχι**
 * - τους τύπους **θα τους εξάγεται από το τι πρέπει να φτιάξετε στη μέθοδο main
 * ()** και τις εξής **μεθόδους**:
 * 
 * - 3 **constructors** της επιλογής σας (ανάλογα με το τι θα χρειαστείτε στη
 * μέθοδο main()).
 * - **void eatAnimal (int)** - (φάε θήραμα) ανεβάζει το βάρος του, κατά 10% της
 * τιμής της παραμέτρου.
 * - **String breed(BlackPanther bp)** - (αναπαραγωγή) η οποία παραλαμβάνει ένα
 * αντικείμενο **bp** της κλάσης **BlackPanther** και **επιστρέφει** τη
 * **συμβολοσειρά**
 * "Η αναπαραγωγή του {this.name} και του {bp.name}  πραγματοποιήθηκε" μόνο αν ο
 * πάνθηρας συνυπάρχει (δηλ. ζει στο ίδιο περιβάλλον) με τον άλλον πάνθηρα και
 * αν είναι του αντίθετου φύλου, αλλιώς **επιστρέφει** την **αυμβολοσειρά**
 * "Αδύνατη η αναπαραγωγή του {this.name}  με τον {bp.name} ". Η συνάρτηση
 * ενημερώνει κατάλληλα την τιμή του **αναπαράχθηκε_ή_όχι κατάλληλα για κάθε
 * πάνθηρα που αναπαράχθηκε.**
 * - **String searchFood(int)** - (ψάξε για φαγητό) **ανεβάζει** την ηλικία του,
 * κατά **μια** μονάδα για κάθε έτος αναζήτησης που θα παραλάβει παραμετρικά.
 * Επιπλέον, για κάθε έτος, κατά τη διάρκεια της αναζήτησης για φαγητό υπάρχει
 * περίπτωση (τυχαιότητα) με πιθανότητα **15**% να καταφέρει να φάει θήραμα
 * βάρους 20 κιλών, **25**% να φάει θήραμα βάρους 10 κιλών, **35**% να φάει
 * θήραμα βάρους 5 κιλών και **25**% να μην πιάσει κανένα θήραμα. Σε περίπτωση
 * επιτυχίας, τότε η μέθοδος καλεί την eatAnimal() κατάλληλα. Η μέθοδος
 * **επιστρέφει** σε **συμβολοσειρά** το αποτέλεσμα της αναζήτησης για φαγητό.
 * - **String getData()** - επιστρέφει **διαμορφωμένη συμβολοσειρά** με όλα τα
 * ονόματα και όλες τιμές των χαρακτηριστικών ενός πάνθηρα. Φροντίστε οι boolean
 * τιμές (όπως π.χ. το gender και το breed_done του πάνθηρα) να εμφανίζονται με
 * τα κατάλληλα λεκτικά (π.χ. ‘αρσενικός’ ή ‘θηλυκός’ κλπ).
 * 
 * Στη συνέχεια υλοποιήστε τη μέθοδο **main()**, στην οποία γίνονται με τη
 * **σειρά** τα παρακάτω:
 * 
 * - Κατασκευάστε ****3 μαύρους πάνθηρες, έναν στην Αφρική (θηλυκό) με όνομα
 * **Midnight** έναν δεύτερο στην Αφρική (αρσενικό) και έναν τρίτο στη Ν. Ασία
 * (θηλυκό), με βάρος 55 κιλά έκαστος.
 * - O δεύτερος πάνθηρας ονομάζεται **Shadow**.
 * - Ο τρίτος πάνθηρας ονομάζεται **Ngozi**.
 * - Όλοι οι πάνθηρες έχουν **ηλικία** 4 ετών.
 * - Ο **πρώτος** πάνθηρας τρέφεται με θήραμα βάρους 7 κιλών.
 * - Ο **δεύτερος** πάνθηρας τρέφεται με θήραμα βάρους 5 κιλών.
 * - Ο **τρίτος** πάνθηρας τρέφεται με θήραμα βάρους 13 κιλών.
 * - Ο **βαρύτερος** πάνθηρας προσπαθεί να αναπαραχθεί με τους υπόλοιπους
 * πάνθηρες. Το αποτέλεσμα **εκτυπώνεται** στην κονσόλα.
 * - Ο **ελαφρύτερος** πάνθηρας προσπαθεί να αναπαραχθεί με τους υπόλοιπους
 * πάνθηρες. Το αποτέλεσμα **εκτυπώνεται** στην κονσόλα.
 * - Ο **πρώτος** και **τρίτος** πάνθηρας ψάχνουν για φαγητό για 1 έτος.
 * - Ο **νεότερος** πάνθηρας προσπαθεί να **αναπαραχθεί**. Το αποτέλεσμα
 * **εκτυπώνεται** στην κονσόλα.
 * - Ο πάνθηρας που **δεν έχει αναπαραχθεί**, ψάχνει για φαγητό για 2 έτη.
 * - **Εκτυπώστε** όλες τις τιμές των χαρακτηριστικών για όλους τους πάνθηρες με
 * την κατάλληλη μέθοδο, **ταξινομημένα** από τον ελαφρύτερο προς τον βαρύτερο
 * πάνθηρα.
 * 
 */

public class BlackPanther {

    private String name;
    private int age;
    private String area;
    private double weight;
    private String gender;
    private boolean matedOrNot;

    // constructors

    public BlackPanther() {

    }

    public BlackPanther(String name, String area, String gender, int age, double weight, boolean matedOrNot) {
        this.name = name;
        this.area = area;
        this.gender = gender;
        this.age = age;
        this.weight = weight;
        this.matedOrNot = matedOrNot;
    }

    // getters and setters

    // getters
    public String getName() {
        return name;
    }

    public String getArea() {
        return area;
    }

    public String getGender() {
        return gender;
    }

    public int gatAge() {
        return age;
    }

    public double getWeight() {
        return weight;
    }

    public boolean getMatedOrNot() {
        return matedOrNot;
    }

    // setters
    public void setName(String name) {
        this.name = name;
    }

    public void setArea(String area) {
        this.area = area;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setWeight(double weight) {
        this.weight = weight;
    }

    public void setMatedOrNot(boolean matedOrNot) {
        this.matedOrNot = matedOrNot;
    }

    // methods
    /*
     * void eatAnimal (int) - (φάε θήραμα) ανεβάζει το βάρος του, κατά 10% της τιμής
     * της παραμέτρου.
     */

    public void eatAnimal(int eat) {
        weight = (10 * eat) * 100;
    }

    /*
     * String breed(BlackPanther bp) - (αναπαραγωγή) η οποία παραλαμβάνει ένα
     * αντικείμενο bp της κλάσης BlackPanther και επιστρέφει τη συμβολοσειρά
     * "Η αναπαραγωγή του {this.name} και του {bp.name}  πραγματοποιήθηκε" μόνο αν ο
     * πάνθηρας συνυπάρχει (δηλ. ζει στο ίδιο περιβάλλον) με τον άλλον πάνθηρα και
     * αν είναι του αντίθετου φύλου, αλλιώς επιστρέφει την αυμβολοσειρά
     * "Αδύνατη η αναπαραγωγή του {this.name}  με τον {bp.name} ". Η συνάρτηση
     * ενημερώνει κατάλληλα την τιμή του αναπαράχθηκε_ή_όχι κατάλληλα για κάθε
     * πάνθηρα που αναπαράχθηκε.
     */

    public String breed(BlackPanther bp) {
        if (!gender.equals(bp.getGender()) && area.equals(bp.getArea())) {
            matedOrNot = true;
            bp.setMatedOrNot(true);
            return ("Η αναπαραγωγή του " + getName() + "και του" + bp.getName() + "πραγματοποιήθηκε");
        } else {
            return "Αδύνατη η αναπαραγωγή του " + getName() + " με τον " + bp.getName();
        }

        

    }
}
